name: CI Build Pipeline

on:
  push:
    branches:
      - feature/*
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Cache Node Modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Install Dependencies
      run: npm install --frozen-lockfile

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Determine Version
      id: version
      run: |
        if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
          VERSION=$(git describe --tags --abbrev=0)
        elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
          VERSION="develop-$(git rev-parse --short HEAD)"
        else
          VERSION="feature-$(git rev-parse --short HEAD)"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/demo-app:${{ env.VERSION }}


    # - name: Set up SonarCloud Scanner
    #   uses: sonarsource/sonarcloud-github-action@v5
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   with:
    #     # Specify your SonarCloud project settings here
    #     args: >
    #       -Dsonar.projectKey=${{ github.repository }}
    #       -Dsonar.host.url=https://sonarcloud.io


    # - name: Run SonarQube Scan
    #   run: |
    #     sonar-scanner

    # - name: Notify Team (Optional)
    #   if: success()
    #   run: |
    #     curl -X POST -H 'Content-type: application/json' --data '{"text":"CI build successful! Image tagged and pushed to GHCR."}' https://hooks.slack.com/services/${{ secrets.SLACK_WEBHOOK }}
